<launch>
    <arg name="move_group" default="arm_w_eef" />
    <arg name="ee_link" default="iiwa14_link_eef" />
    <arg name="ros_rate" default="0.1" />

    <arg name="robot_name" default="iiwa" />
    <arg name="model" default="iiwa14" />
    <arg name="w_o_eef" default="true" />
    <arg name="w_eef_static" default="false" />
    <arg name="w_eef_adjustable" default="false" />

    <arg name="hardware_interface" default ="PositionJointInterface" />

    <arg name="sim" default="false" />
    <arg name="rviz" default="true" />
    <arg name="rviz_config" default="true" />

    <!--
        Remapping (moveit_planning_execution.launch)
    -->
    <remap from="/$(arg hardware_interface)_trajectory_controller/follow_joint_trajectory" to="/$(arg robot_name)/$(arg hardware_interface)_trajectory_controller/follow_joint_trajectory" />
    <remap from="robot_description" to="/$(arg robot_name)/robot_description" />
    <remap from="/get_planning_scene" to="/$(arg robot_name)/get_planning_scene" />

    <!-- namespace iiwa -->
    <group ns="$(arg robot_name)">
            
        <!-- iiwa_control -->
            <arg name="controllers" value="joint_state_controller $(arg hardware_interface)_trajectory_controller" />
            <arg name="joint_state_frequency" default="100" />
            <arg name="robot_state_frequency" default="100" />
            <rosparam file="$(find iiwa_control)/config/iiwa_control.yaml" command="load" />
            <!-- iiwa_control.yaml file VALUES ARE NOT CORRECT! -->
            <param name="/$(arg robot_name)/joint_state_controller/publish_rate" value="$(arg joint_state_frequency)" />
            <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="$(arg controllers)" />
            <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen">
                <remap from="joint_states" to="/$(arg robot_name)/joint_states" />
                <param name="publish_frequency" value="$(arg robot_state_frequency)" />
            </node>
            
        <!-- iiwa_hw -->
            <rosparam file="$(find iiwa_hw)/config/joint_names.yaml" command="load" />
            <param name="interface" value="$(arg hardware_interface)" />
            <node name="iiwa_hw" pkg="iiwa_hw" type="iiwa_hw-bin" respawn="false" output="screen" />
            
        <!-- move_group -->
            <!-- planning_context -->
                <!--<arg name="load_robot_description" default="true" />-->
                <arg name="robot_description" default="robot_description" />

                <!-- iiwa14_upload -->
                    <arg name="origin_xyz" default="'-1.1 -0.5 0'" />
                    <arg name="origin_rpy" default="'0 0 0'" />
                    <!-- if robot model is used with eef or not -->
                    <param if="$(arg w_o_eef)" name="robot_description" command="$(find xacro)/xacro '$(find iiwa_description)/urdf/iiwa14.urdf.xacro' hardware_interface:=$(arg hardware_interface) robot_name:=$(arg robot_name) origin_xyz:=$(arg origin_xyz) origin_rpy:=$(arg origin_rpy)" />
                    <param if="$(arg w_eef_static)" name="robot_description" command="$(find xacro)/xacro '$(find iiwa_description)/urdf/iiwa14_light_static.urdf.xacro' hardware_interface:=$(arg hardware_interface) robot_name:=$(arg robot_name) origin_xyz:=$(arg origin_xyz) origin_rpy:=$(arg origin_rpy)" />
                    <param if="$(arg w_eef_adjustable)" name="robot_description" command="$(find xacro)/xacro '$(find iiwa_description)/urdf/iiwa14_light_adjustable.urdf.xacro' hardware_interface:=$(arg hardware_interface) robot_name:=$(arg robot_name) origin_xyz:=$(arg origin_xyz) origin_rpy:=$(arg origin_rpy)" />
                    
               
                <param if="$(arg w_o_eef)" name="$(arg robot_description)_semantic" textfile="$(find iiwa_moveit)/config/$(arg model).srdf" />
                <param if="$(arg w_eef_static)" name="$(arg robot_description)_semantic" textfile="$(find iiwa_eef_light_static)/config/$(arg model)_camera_light_static_eef.srdf" />
                <param if="$(arg w_eef_adjustable)" name="$(arg robot_description)_semantic" textfile="$(find iiwa_eef_light_adjustable)/config/$(arg model)_camera_light_adjustable_eef.srdf" />

                <group ns="$(arg robot_description)_planning">
                    <rosparam if="$(arg w_o_eef)" file="$(find iiwa_moveit)/config/joint_limits.yaml" command="load" />
                    <rosparam if="$(arg w_eef_static)" file="$(find iiwa_eef_light_static)/config/joint_limits.yaml" command="load" />
                    <rosparam if="$(arg w_eef_adjustable)" file="$(find iiwa_eef_light_adjustable)/config/joint_limits.yaml" command="load" />
                </group>
                <group ns="$(arg robot_description)_kinematics">
                    <rosparam if="$(arg w_o_eef)" file="$(find iiwa_moveit)/config/kinematics.yaml" command="load" />
                    <rosparam if="$(arg w_eef_static)" file="$(find iiwa_eef_light_static)/config/kinematics.yaml" command="load" />
                    <rosparam if="$(arg w_eef_adjustable)" file="$(find iiwa_eef_adjustable)/config/kinematics.yaml" command="load" />
                </group>


                <arg name="allow_trajectory_execution" default="true" />
                <arg name="max_safe_path_cost" default="1" />
                <arg name="jiggle_fraction" default="0.05" />
                <arg name="publish_monitored_planning_scene" default="true" />
                
            <!-- namespace move_group -->
            <group ns="move_group">
                <!-- oompl planning pipeline -->
                    <arg name="planning_plugin" value="ompl_interface/OMPLPlanner" /> 
                    <!-- todo: check xml list format -->
                    <arg name="planning_adapters" value="default_planner_request_adapters/AddTimeParameterization
				       default_planner_request_adapters/FixWorkspaceBounds
				       default_planner_request_adapters/FixStartStateBounds
				       default_planner_request_adapters/FixStartStateCollision
				       default_planner_request_adapters/FixStartStatePathConstraints" />
                    <arg name="start_state_max_bounds_error" default="0.1" />
                    <param name="planning_plugin" value="$(arg planning_plugin)" />
                    <param name="request_adapters" value="$(arg planning_adapters)" />
                    <param name="start_state_max_bounds_error" value="$(arg start_state_max_bounds_error)" />
                    <rosparam file="$(find iiwa_moveit)/config/ompl_planning.yaml" command="load" />
                    
                <!-- trajectory execution -->
                    <arg name="moveit_manage_controllers" default="true" />
                    <param name="moveit_manage_controllers" value="$(arg moveit_manage_controllers)" />
                    <param name="trajectory_execution/allowed_execution_duration_scaling" value="1.2" />
                    <param name="trajectory_execution/allowed_goal_duration_margin" value="0.5" />
            
                <!-- controller_manager -->
                    <arg name="moveit_controller_manager" default="moveit_simple_controller_manager/MoveItSimpleControllerManager" />
                    <param name="moveit_controller_manager" value="$(arg moveit_controller_manager)" />
                    <rosparam file="$(find iiwa_moveit)/config/$(arg hardware_interface)_controllers.yaml" command="load" />
                
                <!-- sensor functionality -->
                    <arg name="moveit_sensor_manager" default="iiwa" />
                    <param name="octomap_resolution" type="double" value="0.025" />
                    <param name="max_range" type="double" value="5.0" />
                    <!-- iiwa_sensor_manager.launch file empty-->
            </group>

            <arg name="move_group_command_args" default="" />
            <node name="move_group" pkg="moveit_ros_move_group" type="move_group" respawn="false" output="screen" args="$(arg move_group_command_args)">
            
                <env name="DISPLAY" value="$(optenv DISPLAY :0)" />
                <param name="allow_trajectory_execution" value="$(arg allow_trajectory_execution)" />
                <param name="max_safe_path_cost" value="$(arg max_safe_path_cost)" />
                <param name="jiggle_fraction" value="$(arg jiggle_fraction)" />
                <!-- xml liste s.o. -->
                <param name="capabilities" value="move_group/MoveGroupCartesianPathService
                    move_group/MoveGroupExecuteTrajectoryAction
                    move_group/MoveGroupKinematicsService
                    move_group/MoveGroupMoveAction
                    move_group/MoveGroupPickPlaceAction
                    move_group/MoveGroupPlanService
                    move_group/MoveGroupQueryPlannersService
                    move_group/MoveGroupStateValidationService
                    move_group/MoveGroupGetPlanningSceneService
                    move_group/ClearOctomapService
                    " />
                <param name="planning_scene_monitor/publish_planning_scene" value="$(arg publish_monitored_planning_scene)" />
                <param name="planning_scene_monitor/publish_geometry_updates" value="$(arg publish_monitored_planning_scene)" />
                <param name="planning_scene_monitor/publish_state_updates" value="$(arg publish_monitored_planning_scene)" />
                <param name="planning_scene_monitor/publish_transforms_updates" value="$(arg publish_monitored_planning_scene)" />
                
            </node>
            
        <!-- rviz -->
            <group if="$(arg rviz)" >
            <arg name="rviz_command_args" value="-d $(find iiwa_moveit)/launch/moveit.rviz" />
            <node name="$(anon rviz)" pkg="rviz" type="rviz" respawn="false" output="screen" args="$(arg rviz_command_args)">
                <rosparam file="$(find iiwa_moveit)/config/kinematics.yaml" command="load" />
            </node>
            </group>

    </group>
</launch>
