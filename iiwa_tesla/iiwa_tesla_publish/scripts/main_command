#! /usr/bin/env python3

import rospy
from iiwa_msgs.msg import JointPosition, CartesianPose
from iiwa_tesla_msgs.srv import NewGoalJoint
import math

class movement():
    def __init__(self):
            
        self.goal_flag = False
        self.goal_asked = 0
        rospy.wait_for_service('/tesla/NewGoalJoint')
        self.ng = rospy.ServiceProxy('/tesla/NewGoalJoint', NewGoalJoint)
        self.threshold = 0.1

    def callback(self, data):
        if not self.goal_flag:
            print('demanding new goal')
            self.goal_response = self.ng(self.goal_asked)
            print('goal asked: '+str(self.goal_asked))
            
            while publisher.get_num_connections() < 1:
                print('waiting for subscribers to be connected')
                 
            return self.move(self.goal_response)
        else:
            # print('goal is stil set. no new goal required')
            return self.get_distance(data, self.goal_response)

    def get_distance(self, data, goal_response):
        distance = math.sqrt(
                (data.position.a1 - goal_response.a1)**2
                + (data.position.a2 - goal_response.a2)**2
                + (data.position.a3 - goal_response.a3)**2
                + (data.position.a4 - goal_response.a4)**2
                + (data.position.a5 - goal_response.a5)**2
                + (data.position.a6 - goal_response.a6)**2
                + (data.position.a7 - goal_response.a7)**2)
        #print(distance)

        if distance < self.threshold:
            print('verify goal asked: '+str(self.goal_asked))
            print('goal reached: '+str(self.goal_response.goal_reached))
            if self.goal_asked == self.goal_response.goal_reached:
                self.goal_asked += 1
                self.goal_flag = False
            else:
                self.goal_flag = True
        else:
            # print('distance to goal to large. still moving')
            pass


    def idle(self):
        print('waiting for new goal...')
        return print('idle')


    def listener(self):
        rospy.init_node('test_sub')
        rospy.Subscriber('/iiwa/state/JointPosition', JointPosition, self.callback)
        rospy.spin()

    def move(self, goal_response):
        self.goal_flag = True
        if not rospy.is_shutdown():
            
            goal = JointPosition()
            goal.position.a1 = goal_response.a1
            goal.position.a2 = goal_response.a2
            goal.position.a3 = goal_response.a3
            goal.position.a4 = goal_response.a4
            goal.position.a5 = goal_response.a5
            goal.position.a6 = goal_response.a6
            goal.position.a7 = goal_response.a7

            publisher.publish(goal)
            print('start moving')
        else:
            print('error')

publisher = rospy.Publisher('/iiwa/command/JointPosition', JointPosition, queue_size=1)
app = movement()
app.listener()