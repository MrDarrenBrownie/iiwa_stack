#! /usr/bin/env python3

import sys
import rospy
import moveit_commander
import moveit_msgs.msg
import geometry_msgs.msg
from std_msgs.msg import String


moveit_commander.roscpp_initialize(sys.argv)
rospy.init_node('iiwa_tesla_moveit_python_demo')

robot = moveit_commander.RobotCommander()
scene = moveit_commander.PlanningSceneInterface()
group_name = 'manipulator'
move_group = moveit_commander.MoveGroupCommander(group_name)

display_trajectory_publisher = rospy.Publisher('/move_group/display_planned_path', moveit_msgs.msg.DisplayTrajectory, queue_size=20)


move_group.set_planning_time(1)
move_group.set_planner_id('RRTConnectkConfigDefault')
eef = 'iiwa_link_ee'
move_group.set_end_effector_link(eef)

current_joint = move_group.get_current_joint_values()
home_joint = [0.0 for x in range(7)]

move_group.set_start_state_to_current_state()
move_group.set_joint_value_target(home_joint)
move_group.go(wait=True)

while not rospy.is_shutdown():
    '''
    command_cartesian_position = move_group.get_current_pose(eef)
    command_cartesian_position.pose.position.x += 1e-6
    command_cartesian_position.pose.position.y += 0.010000
    command_cartesian_position.pose.position.z -= 0.010000
    command_cartesian_position.pose.orientation.x += 1e-6
    command_cartesian_position.pose.orientation.y += 1e-6
    command_cartesian_position.pose.orientation.z += 1e-6
    command_cartesian_position.pose.orientation.w = 1.000000

    move_group.set_start_state_to_current_state()

    move_group.set_pose_target(command_cartesian_position, eef)

    success = move_group.go(wait=True)
    move_group.stop()
    move_group.clear_pose_targets()
    '''
    pass

