#!/usr/bin/python3

import rospy
import json
import iiwa_msgs.msg

tolerance = 0.1


with open('/home/alexander/iiwa_stack_ws/src/iiwa_stack/iiwa_tesla/iiwa_tesla_publish/src/static_jp_2.json') as jps:
    static_joint_positions_old_samples = json.load(jps)
    jps.close()

'''
static_joint_positions_old=[
    [
        1.521018,
        0.936041,
        1.910604,
        1.258308,
        -1.855485,
        0.158411,
        -0.274345
    ],
    [
        1.444927,
        1.644794,
        1.317195,
        1.192913,
        -2.399043,
        0.342944,
        0.489742
    ],
    [
        1.463225,
        1.424553,
        1.317221,
        1.548506,
        -1.261631,
        0.266389,
        -0.91075
    ],
    [
        1.365327,
        1.2061067,
        1.317300,
        1.773051,
        -0.711992,
        0.485281,
        -1.319086
    ],
    [
        0.937974,
        1.5912815,
        1.26207,
        1.450368,
        -0.569070,
        0.2841261,
        -0.9246565
    ],
    [
        0.587496,
        1.786331,
        1.2620054,
        1.525936,
        0.04433607,
        0.6074723,
        -1.278944
    ],

    [
        -0.2930321,
        1.3347344,
        1.3212584,
        0.7278080,
        -0.0709839,
        1.4381128,
        -1.1935557
    ],
    [
        0.2932561,
        1.2632293,
        1.3211445,
        1.2822453,
        -0.3234543,
        1.4547424,
        -1.2192922
    ],
    [
        0.878087,
        1.1893045,
        1.3214186,
        1.5451080,
        -0.5467594,
        1.1560206,
        -1.2594479
    ],
    [
        1.3404828,
        1.3577067,
        1.3212687,
        1.4183549,
        -1.0051014,
        0.5973182,
        -1.0540941
    ],
    [
        1.9971072,
        1.3331114,
        1.3212748,
        1.7691743,
        -2.3046097,
        0.2332993,
        0.4534233
    ]
]
'''

static_joint_positions_ptp=[
    [
        1.521018,
        0.936041,
        1.910604,
        1.258308,
        -1.855485,
        0.158411,
        -0.274345
    ],
    [
        1.444927,
        1.644794,
        1.317195,
        1.192913,
        -2.399043,
        0.342944,
        0.489742
    ],
    [
        1.463225,
        1.424553,
        1.317221,
        1.548506,
        -1.261631,
        0.266389,
        -0.91075
    ],
    [
        1.217010,
        1.303517,
        1.317216,
        1.519879,
        -0.871551,
        0.425634,
        -1.001577
    ],
    [
        0.937974,
        1.5912815,
        1.26207,
        1.450368,
        -0.569070,
        0.2841261,
        -0.9246565
    ],
    [
        0.6007054,
        1.7422787,
        1.2611995,
        1.5416010,
        -0.0078253,
        0.62429112,
        -1.2709368
    ],
    [
        -0.2930321,
        1.3347344,
        1.3212584,
        0.7278080,
        -0.0709839,
        1.4381128,
        -1.1935557
    ],
    [
        0.2932561,
        1.2632293,
        1.3211445,
        1.2822453,
        -0.3234543,
        1.4547424,
        -1.2192922
    ],
    [
        0.878087,
        1.1893045,
        1.3214186,
        1.5451080,
        -0.5467594,
        1.1560206,
        -1.2594479
    ],
    [
        1.3404828,
        1.3577067,
        1.3212687,
        1.4183549,
        -1.0051014,
        0.5973182,
        -1.0540941
    ],
    [
        1.9971072,
        1.3331114,
        1.3212748,
        1.7691743,
        -2.3046097,
        0.2332993,
        0.4534233
    ],
    [
        2.2809548,
        1.28551506,
        1.32125365,
        1.8784176,
        -2.9649965,
        0.31493914,
        1.04273176
    ]
]

'''
home position
starts at frame
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38 Ãœbergang
home position
'''
static_joint_positions_ptp_2=[
    [
        2.2809548,
        1.28551506,
        1.32125365,
        1.8784176,
        -2.9649965,
        0.31493914,
        1.04273176
    ],
    [
        1.4837248,
        1.6334149,
        1.3213177,
        1.4021966,
        -1.6191122,
        0.2463794,
        0.1411291
    ],
    [
        1.3196029,
        1.3316043,
        1.3213026,
        1.5203266,
        -0.891533,
        0.4159258,
        -0.8821119
    ],
    [
        0.9464419,
        1.2797306,
        1.3213207,
        1.6044919,
        -0.5377961,
        0.8228344,
        -1.2572611

    ],
    [
        0.6122995,
        1.3509708,
        1.3213802,
        1.5168980,
        -0.3753252,
        1.0463131,
        -1.2789438

    ],
    [
        0.3114598,
        1.4681960,
        1.3213658,
        1.4426858,
        -0.1761159,
        1.2327276,
        -1.3014117
    ],
    [
        0.4483344,
        1.3959225,
        1.3212787,
        1.7292788,
        -0.1387527,
        1.2004594,
        -1.3896144
    ],
    [
        0.5939078,
        1.0856633,
        1.3213877,
        1.5891984,
        -0.4613625,
        0.9913496,
        -1.4068082
    ],
    [
        0.9118323,
        0.9853355,
        1.3212889,
        1.6004390,
        -0.5980577,
        0.7098650,
        -1.443270
    ],
    [
        1.4956487,
        0.8208735,
        1.3380337,
        1.7283194,
        -0.6046133,
        0.4831035,
        -1.6794575
    ],
    [
        1.4984353,
        1.4141199,
        1.3380835,
        2.040512,
        -0.1856821,
        0.8627011,
        -1.4926371
    ],
    [
        1.9210646,
        1.4148641,
        1.3379466,
        2.0410256,
        -0.2186014,
        0.4448348,
        -1.5217447
    ],
    [
        1.3678742,
        1.8192687,
        0.4585265,
        1.8852168,
        -1.0386195,
        1.0676659,
        -0.2369263
    ],
    [
        0.7917724,
        1.856693,
        0.4585593,
        1.9990655,
        -0.3901021,
        1.1940579,
        -0.4659526
    ],
    [
        0.1449467,
        1.8221633,
        0.4585517,
        1.8934522,
        0.1751793,
        1.3974099,
        -0.4476287
    ],
    [
        -0.3471527,
        2.0006179,
        0.4585951,
        1.8141144,
        0.7010419,
        1.3802127,
        -0.4782817
    ],
    [
        -0.1127616,
        2.0722410,
        1.3265116,
        1.6193474,
        0.7972923,
        1.6247655,
        -1.3100689
    ],
    [
        -0.1547524,
        0.6751279,
        1.9025861,
        1.3630404,
        -0.6598129,
        1.4417222,
        -1.648
    ],
    [
        1.0449854,
        0.0333803,
        1.9059205,
        1.9255985,
        -1.4595936,
        0.4631790,
        -1.4721709
    ],
    [
        2.2809548,
        1.28551506,
        1.32125365,
        1.8784176,
        -2.9649965,
        0.31493914,
        1.04273176
    ]
]


def all_close(goal, actual, tolerance):
    """
    Convenience method for testing if the values in two lists are within a tolerance of each other.
    For Pose and PoseStamped inputs, the angle between the two quaternions is compared (the angle
    between the identical orientations q and -q is calculated correctly).
    @param: goal       A list of floats, a Pose or a PoseStamped
    @param: actual     A list of floats, a Pose or a PoseStamped
    @param: tolerance  A float
    @returns: bool
    """
    
    if type(goal) is list:
        for index in range(len(goal)):
            if abs(actual[index] - goal[index]) > tolerance:
                return False
    '''
    elif type(goal) is geometry_msgs.msg.PoseStamped:
        return all_close(goal.pose, actual.pose, tolerance)

    elif type(goal) is geometry_msgs.msg.Pose:
        x0, y0, z0, qx0, qy0, qz0, qw0 = pose_to_list(actual)
        x1, y1, z1, qx1, qy1, qz1, qw1 = pose_to_list(goal)
        # Euclidean distance
        d = dist((x1, y1, z1), (x0, y0, z0))
        # phi = angle between orientations
        cos_phi_half = fabs(qx0 * qx1 + qy0 * qy1 + qz0 * qz1 + qw0 * qw1)
        return d <= tolerance and cos_phi_half >= cos(tolerance / 2.0)
    '''

    # stay at pos0
    
    if goal[0] == 1.521018:
        rospy.sleep(1.5)
    

    return True

###########################################################################

class static_jp:
    def __init__(self):
        
        self.current_position = []
        self.static_position_publisher = rospy.Publisher('iiwa/command/JointPosition', iiwa_msgs.msg.JointPosition)

        rospy.Subscriber('iiwa/state/JointPosition', iiwa_msgs.msg.JointPosition, self.write_current_position)
        rospy.init_node('move_static_route')

        while not rospy.is_shutdown():
            self.move_static_positions(l_of_static_positions=static_joint_positions_ptp_2)
        
        rospy.spin()

    def write_current_position(self, data):
        self.current_position = [
            data.position.a1,
            data.position.a2,
            data.position.a3,
            data.position.a4,
            data.position.a5,
            data.position.a6,
            data.position.a7
        ]
    

    def move_static_positions(self, l_of_static_positions):
        static_position = iiwa_msgs.msg.JointPosition()
        for pos in l_of_static_positions:

            static_position.position.a1 = pos[0]
            static_position.position.a2 = pos[1]
            static_position.position.a3 = pos[2]
            static_position.position.a4 = pos[3]
            static_position.position.a5 = pos[4]
            static_position.position.a6 = pos[5]
            static_position.position.a7 = pos[6]

            
            while not all_close(pos, self.current_position, tolerance):
                self.static_position_publisher.publish(static_position)


###########################################################################

def run_static_main():

    static_jp()


###########################################################################


run_static_main()