#!/usr/bin/python3

import sys
import copy
import json
import rospy
import tf.transformations
import moveit_commander
import moveit_msgs.msg
import geometry_msgs.msg
import iiwa_msgs.msg
import shape_msgs.msg
import std_msgs.msg
from math import pi, dist, fabs, cos
from moveit_commander.conversions import pose_to_list
from rospy_message_converter import message_converter


# INITIALIZE MOVEIT

moveit_commander.roscpp_initialize(sys.argv)
rospy.init_node('iiwa_tesla_move_route')
pose_to_rviz = rospy.Publisher('/iiwa/move_group/p2r', geometry_msgs.msg.PoseArray, queue_size=1)
# display_trajectory_publisher = rospy.Publisher('/move_group/display_planned_path', moveit_msgs.msg.DisplayTrajectory, queue_size=20)
loop_count_publisher = rospy.Publisher('/iiwa/loop_count', std_msgs.msg.UInt64, queue_size=5)
rate = rospy.Rate(1)
tolerance = 0.1

robot = moveit_commander.RobotCommander()
scene = moveit_commander.PlanningSceneInterface(synchronous=True)
group_name = 'eef_light_static'
move_group = moveit_commander.MoveGroupCommander(group_name)

move_group.set_planning_time(60)
move_group.set_planner_id('RRTConnectkConfigDefault')
eef = move_group.get_end_effector_link()
move_group.set_end_effector_link(eef)



# ADD OBSTACLE TO SCENE -> TESLA PART

def wait_for_state_update(object_name, object_is_known=False, object_is_attached=False, timeout=10):
        start = rospy.get_time()
        seconds = rospy.get_time()
        while (seconds - start < timeout) and not rospy.is_shutdown():
            # Test if the box is in attached objects
            attached_objects = scene.get_attached_objects([object_name])
            is_attached = len(attached_objects.keys()) > 0

            # Test if the box is in the scene.
            # Note that attaching the box will remove it from known_objects
            is_known = object_name in scene.get_known_object_names()
            
            # Test if we are in the expected state
            if (object_is_attached == is_attached) and (object_is_known == is_known):
                return True

            # Sleep so that we give other threads time on the processor
            rospy.sleep(1)
            seconds = rospy.get_time()

        return False

def add_tesla_part():
    # position transformation because bad cad model
    tesla_part_pose = geometry_msgs.msg.PoseStamped()
    tesla_part_pose.header.frame_id = 'world'
    tesla_part_pose.pose.position.x = 0.25+0.4
    tesla_part_pose.pose.position.y = 3.45
    tesla_part_pose.pose.position.z = 0.0
    rotation = tf.transformations.quaternion_from_euler(0,0,-pi/2)
    tesla_part_pose.pose.orientation.x = rotation[0]
    tesla_part_pose.pose.orientation.y = rotation[1]
    tesla_part_pose.pose.orientation.z = rotation[2]
    tesla_part_pose.pose.orientation.w = rotation[3]

    tesla_part_name = 'model_y_rear_axle'
    scene.add_mesh(tesla_part_name, pose=tesla_part_pose, filename='/home/alexander/iiwa_stack_ws/src/iiwa_stack/iiwa_tesla/iiwa_tesla_publish/src/tesla_part_solo-1487454-03-B_neu (Meshed)002.stl', size=(0.001,0.001,0.001))
    if not wait_for_state_update(object_name=tesla_part_name, object_is_known=True):
        return rospy.logerr('timeout while adding '+str(tesla_part_name)+' to the scene!')
    else:
        return rospy.loginfo(str(tesla_part_name)+' attached')

add_tesla_part()



# WORKING WITH FRAMES AND GOALS 

def all_close(goal, actual, tolerance):
    """
    Convenience method for testing if the values in two lists are within a tolerance of each other.
    For Pose and PoseStamped inputs, the angle between the two quaternions is compared (the angle
    between the identical orientations q and -q is calculated correctly).
    @param: goal       A list of floats, a Pose or a PoseStamped
    @param: actual     A list of floats, a Pose or a PoseStamped
    @param: tolerance  A float
    @returns: bool
    """
    if type(goal) is list:
        for index in range(len(goal)):
            if abs(actual[index] - goal[index]) > tolerance:
                return False

    elif type(goal) is geometry_msgs.msg.PoseStamped:
        return all_close(goal.pose, actual.pose, tolerance)

    elif type(goal) is geometry_msgs.msg.Pose:
        x0, y0, z0, qx0, qy0, qz0, qw0 = pose_to_list(actual)
        x1, y1, z1, qx1, qy1, qz1, qw1 = pose_to_list(goal)
        # Euclidean distance
        d = dist((x1, y1, z1), (x0, y0, z0))
        # phi = angle between orientations
        cos_phi_half = fabs(qx0 * qx1 + qy0 * qy1 + qz0 * qz1 + qw0 * qw1)
        return d <= tolerance and cos_phi_half >= cos(tolerance / 2.0)

    return True

def is_goal_reached(move_group, goal, tolerance):
    if type(goal) is list:
        rospy.loginfo('wait for movement to be finished')
        while not all_close(goal, move_group.get_current_joint_values(), tolerance):
            pass
    elif type(goal) is geometry_msgs.msg.Pose:
        rospy.loginfo('wait for movement to be finished')
        while not all_close(goal, move_group.get_current_pose().pose, tolerance):
            pass

def ompl_box_constraint():
    pcm = moveit_msgs.msg.PositionConstraint()
    pcm.header.frame_id = 'world'
    pcm.link_name = 'eef_link_ee'
    pcm.weight = 1.0

    cbox = shape_msgs.msg.SolidPrimitive()
    cbox.type = shape_msgs.msg.SolidPrimitive.BOX
    cbox.dimensions = [1.5, 0.5, 0.25]
    pcm.constraint_region.primitives.append(cbox)

    cbox_pose = geometry_msgs.msg.Pose()
    cbox_pose.position.x = -0.6
    cbox_pose.position.y = -0.25
    cbox_pose.position.z = 0.5
    cbox_pose.orientation.w = 1.0
    pcm.constraint_region.primitive_poses.append(cbox_pose)

    return pcm

def joint_constraint(jn, jv):
    jcm = moveit_msgs.msg.JointConstraint()
    jcm.joint_name = jn
    jcm.position = jv
    jcm.tolerance_above = 0.05
    jcm.tolerance_below = 0.05
    jcm.weight = 0.3

    return jcm



# ADD CAD IMPORTED FRAMES TO ROUTES DICTIONARY

# IMPORT FRAMES (and joint positions from JupyterNotebook) FROM JSON FILE CREATED OUTSIDE OF ROS

with open('/home/alexander/iiwa_stack_ws/src/iiwa_stack/iiwa_tesla/iiwa_tesla_publish/src/frames_wheel_house_fromCAD_afterTranslation4.json') as tesla_file:
    frames_wheel_house_left = json.load(tesla_file)
    tesla_file.close()

with open('/home/alexander/iiwa_stack_ws/src/iiwa_stack/iiwa_tesla/iiwa_tesla_publish/src/jp_from_long_term_data.json') as optimal_joint_positions_jsondata:
    jp_wheel_house_left = json.load(optimal_joint_positions_jsondata)
    optimal_joint_positions_jsondata.close()

def create_init_final_joint_positions():
    init_min_acc_joint_movement = iiwa_msgs.msg.JointPosition()
    final_min_acc_joint_movement = iiwa_msgs.msg.JointPosition()

    init_min_acc_joint_movement.position.a1=0.893713
    init_min_acc_joint_movement.position.a2=1.447269
    init_min_acc_joint_movement.position.a3=0.044446
    init_min_acc_joint_movement.position.a4=-0.226373
    init_min_acc_joint_movement.position.a5=1.349588
    init_min_acc_joint_movement.position.a6=-0.896436
    init_min_acc_joint_movement.position.a7=-1.341778

    final_min_acc_joint_movement.position.a1=0.969332
    final_min_acc_joint_movement.position.a2=1.627458
    final_min_acc_joint_movement.position.a3=0.749716
    final_min_acc_joint_movement.position.a4=0.208179
    final_min_acc_joint_movement.position.a5=0.804736
    final_min_acc_joint_movement.position.a6=-0.804188
    final_min_acc_joint_movement.position.a7=-1.571730

    init_min_cycle_time = iiwa_msgs.msg.JointPosition()
    final_min_cycle_time = iiwa_msgs.msg.JointPosition()

    init_min_cycle_time.position.a1=0.835652
    init_min_cycle_time.position.a2=1.456460
    init_min_cycle_time.position.a3=0.563091
    init_min_cycle_time.position.a4=-0.240133
    init_min_cycle_time.position.a5=0.854718
    init_min_cycle_time.position.a6=-0.935640
    init_min_cycle_time.position.a7=-1.362517

    final_min_cycle_time.position.a1=0.784435
    final_min_cycle_time.position.a2=1.538425
    final_min_cycle_time.position.a3=1.474135
    final_min_cycle_time.position.a4=-0.240094
    final_min_cycle_time.position.a5=0.063733
    final_min_cycle_time.position.a6=-0.973431
    final_min_cycle_time.position.a7=-1.498443

    init_min_joint_velocity_mean = iiwa_msgs.msg.JointPosition() 
    final_min_joint_velocity_mean = iiwa_msgs.msg.JointPosition()

    init_min_joint_velocity_mean.position.a1=0.951882
    init_min_joint_velocity_mean.position.a2=1.458486
    init_min_joint_velocity_mean.position.a3=-0.459998
    init_min_joint_velocity_mean.position.a4=-0.228591
    init_min_joint_velocity_mean.position.a5=-1.161994
    init_min_joint_velocity_mean.position.a6=0.831894
    init_min_joint_velocity_mean.position.a7=1.630649

    final_min_joint_velocity_mean.position.a1=0.770893
    final_min_joint_velocity_mean.position.a2=1.552928
    final_min_joint_velocity_mean.position.a3=-1.357880
    final_min_joint_velocity_mean.position.a4=0.189346
    final_min_joint_velocity_mean.position.a5=-0.188492
    final_min_joint_velocity_mean.position.a6=0.882605
    final_min_joint_velocity_mean.position.a7=1.438480

    init_min_joint_velocity_std = iiwa_msgs.msg.JointPosition() 
    final_min_joint_velocity_std = iiwa_msgs.msg.JointPosition()

    init_min_joint_velocity_std.position.a1=0.862608
    init_min_joint_velocity_std.position.a2=1.465091
    init_min_joint_velocity_std.position.a3=0.340579
    init_min_joint_velocity_std.position.a4=-0.210483
    init_min_joint_velocity_std.position.a5=1.113175
    init_min_joint_velocity_std.position.a6=-0.885426
    init_min_joint_velocity_std.position.a7=-1.367787

    final_min_joint_velocity_std.position.a1=0.836790
    final_min_joint_velocity_std.position.a2=1.460838
    final_min_joint_velocity_std.position.a3=0.594540
    final_min_joint_velocity_std.position.a4=-0.234563
    final_min_joint_velocity_std.position.a5=0.857482
    final_min_joint_velocity_std.position.a6=-0.936265
    final_min_joint_velocity_std.position.a7=-1.402647

    return init_min_acc_joint_movement, final_min_acc_joint_movement, init_min_cycle_time, final_min_cycle_time, init_min_joint_velocity_mean, final_min_joint_velocity_mean, init_min_joint_velocity_std, final_min_joint_velocity_std

init_min_acc_joint_movement, final_min_acc_joint_movement, init_min_cycle_time, final_min_cycle_time, init_min_joint_velocity_mean, final_min_joint_velocity_mean, init_min_joint_velocity_std, final_min_joint_velocity_std = create_init_final_joint_positions()


def gmtry_msg_from_CADdata(cad_frames_dict):
    list_of_frames = [geometry_msgs.msg.Pose() for item in cad_frames_dict.keys()]

    for point, key in zip(list_of_frames, cad_frames_dict.keys()):
        point.position.x = (frames_wheel_house_left[key]['x']/1000)-(0.401+0.05)
        point.position.y = (frames_wheel_house_left[key]['y']/1000)+0.401+0.01
        point.position.z = (frames_wheel_house_left[key]['z']/1000)-0.075
        
        # Orientation depending on position of frame -> upper lane, bottom lane,...
        
        point_orientation_transform = tf.transformations.quaternion_from_euler(0,pi/2,0)
        point.orientation.x = point_orientation_transform[0]
        point.orientation.y = point_orientation_transform[1]
        point.orientation.z = point_orientation_transform[2]
        point.orientation.w = point_orientation_transform[3]
        
    return list_of_frames

def gmtry_msg_from_frameGrabber(frameGrammer_frames_dict):
    list_of_frames = [geometry_msgs.msg.Pose() for item in frameGrammer_frames_dict.keys()]

    for point, key in zip(list_of_frames, frameGrammer_frames_dict.keys()):
        point.position.x = frames_wheel_house_left[key]['pose']['position']['x']-1
        point.position.y = frames_wheel_house_left[key]['pose']['position']['y']-1
        point.position.z = frames_wheel_house_left[key]['pose']['position']['z']
        point.orientation.x = frames_wheel_house_left[key]['pose']['orientation']['x']
        point.orientation.y = frames_wheel_house_left[key]['pose']['orientation']['y']
        point.orientation.z = frames_wheel_house_left[key]['pose']['orientation']['z']
        point.orientation.w = frames_wheel_house_left[key]['pose']['orientation']['w']

    return list_of_frames

routes = {'wheel_house_left':gmtry_msg_from_CADdata(frames_wheel_house_left), 'wheel_house_left_jp':jp_wheel_house_left}

print(routes['wheel_house_left_jp'])


# PUBLISH AN ARRAY OF FRAMES TO RVIZ TO VISUALIZE THE POSES THE ROBOT IS TRYING TO REACH

def publish_posearray_to_rviz(pose_array):
    p2r_msg = geometry_msgs.msg.PoseArray()
    p2r_msg.header.frame_id = 'world'
    p2r_msg.header.stamp = rospy.Time.now()
    p2r_msg.poses = pose_array
    return pose_to_rviz.publish(p2r_msg)

publish_posearray_to_rviz(routes['wheel_house_left'])



# MAIN MOVEMENT FUNCTION

def move(route):
    if type(routes[route][0]) is iiwa_msgs.msg.JointPosition:

        current_state = move_group.get_current_state()
        move_group.set_start_state(current_state)

        move_group.set_joint_value_target(routes[route])
        move_group.go()
        is_goal_reached(move_group, routes[route], tolerance)
        move_group.clear_pose_target(eef)

    elif type(routes[route][0]) is geometry_msgs.msg.Pose:
        for n, waypoint in enumerate(routes[route][::5]):
            if n == 0:
            
                current_state = move_group.get_current_state()
                move_group.set_start_state(current_state)
                move_group.set_pose_target(waypoint)
                rospy.loginfo('moving to position '+str(n))
                move_group.go()

                is_goal_reached(move_group, waypoint, tolerance)
                loop_count_publisher.publish(n_rounds)
                
                move_group.clear_pose_target(eef)
                

            elif n == len(routes[route][::5]):
                # last point in cycle
                current_state = move_group.get_current_state()
                move_group.set_start_state(current_state)
                move_group.set_pose_target(waypoint)
                rospy.loginfo('moving to position '+str(n))
                move_group.go()
                is_goal_reached(move_group, waypoint, tolerance)
                move_group.clear_pose_target(eef)       
            
            else:
                # every other point in cycle
                current_state = move_group.get_current_state()
                move_group.set_start_state(current_state)
                move_group.set_pose_target(waypoint)
                rospy.loginfo('moving to position '+str(n))
                move_group.go()
                is_goal_reached(move_group, waypoint, tolerance)
                move_group.clear_pose_target(eef)
                


# MAIN LOOP THAT CALLS THE FUNCTIONS

n_rounds = std_msgs.msg.UInt64()

def run_main():

    # move_group.set_max_velocity_scaling_factor(1.0)
    n_rounds.data = 0
    rospy.loginfo('Main function started')
    route = 'wheel_house_left'

    while not rospy.is_shutdown():
        
        # continue
        rospy.loginfo('Starting main loop. Route '+route+'. Round '+str(n_rounds.data))
        move(route)
        n_rounds.data += 1



rospy.loginfo('objects in scene: '+str(scene.get_known_object_names()))
if 'model_y_rear_axle' in scene.get_known_object_names():
    run_main()