#!/usr/bin/python3

import sys
import rospy
import moveit_commander
import moveit_msgs.msg
import geometry_msgs.msg
from std_msgs.msg import String
from math import pi


moveit_commander.roscpp_initialize(sys.argv)
rospy.init_node('iiwa_tesla_move_route')
rate = rospy.Rate(1)

robot = moveit_commander.RobotCommander()
scene = moveit_commander.PlanningSceneInterface()
group_name = 'manipulator'
move_group = moveit_commander.MoveGroupCommander(group_name)

display_trajectory_publisher = rospy.Publisher('/move_group/display_planned_path', moveit_msgs.msg.DisplayTrajectory, queue_size=20)


move_group.set_planning_time(1)
move_group.set_planner_id('RRTConnectkConfigDefault')
eef = 'iiwa_link_ee'
move_group.set_end_effector_link(eef)

current_joint = move_group.get_current_joint_values()
home_joint = [0.0 for x in range(7)]

move_group.set_start_state_to_current_state()
move_group.set_joint_value_target(home_joint)
move_group.go(wait=True)

home_joint_2 = home_joint
home_joint_2[1] = 14.0 *(pi/180)
home_joint_2[3] = -75.0 *(pi/180)
home_joint_2[5] = 38.0 *(pi/180)

move_group.set_start_state_to_current_state()
move_group.set_joint_value_target(home_joint_2)
move_group.go(wait=True)

while not rospy.is_shutdown():
    print('waiting for new goal...')
    rate.sleep()
    pass
