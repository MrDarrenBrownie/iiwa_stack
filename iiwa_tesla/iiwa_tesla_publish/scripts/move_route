#!/usr/bin/python3

import sys
import copy
import json
import rospy
import tf.transformations
import moveit_commander
import moveit_msgs.msg
import geometry_msgs.msg
import shape_msgs.msg
from math import pi, dist, fabs, cos
from moveit_commander.conversions import pose_to_list



# INITIALIZE MOVEIT

moveit_commander.roscpp_initialize(sys.argv)
rospy.init_node('iiwa_tesla_move_route')
pose_to_rviz = rospy.Publisher('/iiwa/move_group/p2r', geometry_msgs.msg.PoseArray, queue_size=1)
rate = rospy.Rate(1)
tolerance = 0.1

robot = moveit_commander.RobotCommander()
scene = moveit_commander.PlanningSceneInterface(synchronous=True)
group_name = 'eef_light_static'
move_group = moveit_commander.MoveGroupCommander(group_name)

display_trajectory_publisher = rospy.Publisher('/move_group/display_planned_path', moveit_msgs.msg.DisplayTrajectory, queue_size=20)

move_group.set_planning_time(20)
# move_group.set_planner_id('RRTConnectkConfigDefault')
eef = move_group.get_end_effector_link()
move_group.set_end_effector_link(eef)

rospy.sleep(5)



# ADD OBSTACLE TO SCENE -> TESLA PART

def wait_for_state_update(object_name, object_is_known=False, object_is_attached=False, timeout=10):
        start = rospy.get_time()
        seconds = rospy.get_time()
        while (seconds - start < timeout) and not rospy.is_shutdown():
            # Test if the box is in attached objects
            attached_objects = scene.get_attached_objects([object_name])
            is_attached = len(attached_objects.keys()) > 0

            # Test if the box is in the scene.
            # Note that attaching the box will remove it from known_objects
            is_known = object_name in scene.get_known_object_names()
            
            # Test if we are in the expected state
            if (object_is_attached == is_attached) and (object_is_known == is_known):
                return True

            # Sleep so that we give other threads time on the processor
            rospy.sleep(1)
            seconds = rospy.get_time()

        return False


def add_tesla_part():
    # position transformation because bad cad model
    tesla_part_pose = geometry_msgs.msg.PoseStamped()
    tesla_part_pose.header.frame_id = 'world'
    tesla_part_pose.pose.position.x = 0.25+0.4
    tesla_part_pose.pose.position.y = 3.45
    tesla_part_pose.pose.position.z = 0.0
    rotation = tf.transformations.quaternion_from_euler(0,0,-pi/2)
    tesla_part_pose.pose.orientation.x = rotation[0]
    tesla_part_pose.pose.orientation.y = rotation[1]
    tesla_part_pose.pose.orientation.z = rotation[2]
    tesla_part_pose.pose.orientation.w = rotation[3]

    tesla_part_name = 'model_y_rear_axle'
    scene.add_mesh(tesla_part_name, pose=tesla_part_pose, filename='/home/alexander/iiwa_stack_ws/src/iiwa_stack/iiwa_tesla/iiwa_tesla_publish/src/tesla_part_solo-1487454-03-B_neu (Meshed)002.stl', size=(0.001,0.001,0.001))
    rospy.sleep(1)
    if not wait_for_state_update(object_name=tesla_part_name, object_is_known=True):
        return rospy.logerr('timeout while adding '+str(tesla_part_name)+' to the scene!')
    else:
        return rospy.loginfo(str(tesla_part_name)+' attached')


add_tesla_part()


# IMPORT FRAMES FROM JSON FILE CREATED OUTSIDE OF ROS

file = open('/home/alexander/iiwa_stack_ws/src/iiwa_stack/iiwa_tesla/iiwa_tesla_publish/src/frames_wheel_house_fromCAD_afterTranslation4.json')
frames_wheel_house_left = json.load(file)
file.close()



# FUNCTIONS TO GENERATE FRAMES (probably deprecated)

def all_close(goal, actual, tolerance):
    """
    Convenience method for testing if the values in two lists are within a tolerance of each other.
    For Pose and PoseStamped inputs, the angle between the two quaternions is compared (the angle
    between the identical orientations q and -q is calculated correctly).
    @param: goal       A list of floats, a Pose or a PoseStamped
    @param: actual     A list of floats, a Pose or a PoseStamped
    @param: tolerance  A float
    @returns: bool
    """
    if type(goal) is list:
        for index in range(len(goal)):
            if abs(actual[index] - goal[index]) > tolerance:
                return False

    elif type(goal) is geometry_msgs.msg.PoseStamped:
        return all_close(goal.pose, actual.pose, tolerance)

    elif type(goal) is geometry_msgs.msg.Pose:
        x0, y0, z0, qx0, qy0, qz0, qw0 = pose_to_list(actual)
        x1, y1, z1, qx1, qy1, qz1, qw1 = pose_to_list(goal)
        # Euclidean distance
        d = dist((x1, y1, z1), (x0, y0, z0))
        # phi = angle between orientations
        cos_phi_half = fabs(qx0 * qx1 + qy0 * qy1 + qz0 * qz1 + qw0 * qw1)
        return d <= tolerance and cos_phi_half >= cos(tolerance / 2.0)

    return True

def is_goal_reached(move_group, goal, tolerance):
    if type(goal) is list:
        rospy.loginfo('wait for movement to be finished')
        while not all_close(goal, move_group.get_current_joint_values(), tolerance):
            pass
    elif type(goal) is geometry_msgs.msg.Pose:
        rospy.loginfo('wait for movement to be finished')
        while not all_close(goal, move_group.get_current_pose().pose, tolerance):
            pass

def box_constraint():
    
    path_constraint = moveit_msgs.msg.Constraints()
    path_constraint.name = 'path_constraints'

    pos_constraint = moveit_msgs.msg.PositionConstraint()
    pos_constraint.link_name = 'eef_link_ee'
    pos_constraint.weight = 1.0
    
    pos_constraint.target_point_offset = geometry_msgs.msg.Vector3()
    pos_constraint.target_point_offset.x = 0.01
    pos_constraint.target_point_offset.y = 0.01
    pos_constraint.target_point_offset.z = 0.01
    
    pos_constraint.constraint_region = moveit_msgs.msg.BoundingVolume()

    const_region_primitives = shape_msgs.msg.SolidPrimitive()
    const_region_primitives.type = 1
    const_region_primitives.dimensions = [1.2, 1.5, 1.5]
    pos_constraint.constraint_region.primitives = [const_region_primitives]

    prim_pose = geometry_msgs.msg.Pose()
    prim_pose.position.x = -0.6
    prim_pose.position.y = -0.75
    prim_pose.position.x = 0.75
    pos_constraint.constraint_region.primitive_poses = [prim_pose]

    path_constraint.position_constraints = [pos_constraint]


    return path_constraint



# ADD CAD IMPORTED FRAMES TO ROUTES DICTIONARY

def gmtry_msg_from_CADdata(cad_frames_dict):
    list_of_frames = [geometry_msgs.msg.Pose() for item in cad_frames_dict.keys()]

    for point, key in zip(list_of_frames, cad_frames_dict.keys()):
        point.position.x = (frames_wheel_house_left[key]['x']/1000)-(0.401+0.289)
        point.position.y = (frames_wheel_house_left[key]['y']/1000)+0.401
        point.position.z = (frames_wheel_house_left[key]['z']/1000)
        
        # Orientation depending on position of frame -> upper lane, bottom lane,...
        
        point_orientation_transform = tf.transformations.quaternion_from_euler(0,pi/2,0)
        point.orientation.x = point_orientation_transform[0]
        point.orientation.y = point_orientation_transform[1]
        point.orientation.z = point_orientation_transform[2]
        point.orientation.w = point_orientation_transform[3]
        
    return list_of_frames

def gmtry_msg_from_frameGrabber(frameGrammer_frames_dict):
    list_of_frames = [geometry_msgs.msg.Pose() for item in frameGrammer_frames_dict.keys()]

    for point, key in zip(list_of_frames, frameGrammer_frames_dict.keys()):
        point.position.x = frames_wheel_house_left[key]['pose']['position']['x']-1
        point.position.y = frames_wheel_house_left[key]['pose']['position']['y']-1
        point.position.z = frames_wheel_house_left[key]['pose']['position']['z']
        point.orientation.x = frames_wheel_house_left[key]['pose']['orientation']['x']
        point.orientation.y = frames_wheel_house_left[key]['pose']['orientation']['y']
        point.orientation.z = frames_wheel_house_left[key]['pose']['orientation']['z']
        point.orientation.w = frames_wheel_house_left[key]['pose']['orientation']['w']

    return list_of_frames

routes = {'wheel_house_left':gmtry_msg_from_CADdata(frames_wheel_house_left)}



# PUBLISH AN ARRAY OF FRAMES TO RVIZ TO VISUALIZE THE POSES THE ROBOT IS TRYING TO REACH

def publish_posearray_to_rviz(pose_array):
    p2r_msg = geometry_msgs.msg.PoseArray()
    p2r_msg.header.frame_id = 'world'
    p2r_msg.header.stamp = rospy.Time.now()
    p2r_msg.poses = pose_array
    return pose_to_rviz.publish(p2r_msg)

publish_posearray_to_rviz(routes['wheel_house_left'])



# MAIN MOVEMENT FUNCTION

def move(route):
    if not type(routes[route][0]) is geometry_msgs.msg.Pose:
        current_state = move_group.get_current_state()
        move_group.set_start_state(current_state)

        move_group.set_joint_value_target(routes[route])
        move_group.go()
        is_goal_reached(move_group, routes[route], tolerance)
        move_group.clear_pose_target(eef)
        rospy.sleep(0.1)

    else:


        for n, waypoint in enumerate(routes[route]):
            current_state = move_group.get_current_state()
            move_group.set_start_state(current_state)
            move_group.set_path_constraints(box_constraint())
            move_group.set_pose_target(waypoint)
            move_group.go()
            rospy.loginfo('moving to position '+str(n))
            is_goal_reached(move_group, waypoint, tolerance)
            move_group.clear_pose_target(eef)
            rospy.sleep(0.1)



# MAIN LOOP THAT CALLS THE FUNCTIONS

n_rounds = 0
def run_main():

    move_group.set_max_velocity_scaling_factor(0.5)

    rospy.loginfo('Main function started')

    while not rospy.is_shutdown():
        
        rospy.loginfo('Starting main loop. Round '+str(n_rounds))
        move('wheel_house_left')



rospy.loginfo('objects in scene: '+str(scene.get_known_object_names()))
if 'model_y_rear_axle' in scene.get_known_object_names():
    run_main()